// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: flappy.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "Flappy.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(FlappyKafka);
GPBObjCClassDeclaration(FlappyRequest);
GPBObjCClassDeclaration(FlappyResponse);
GPBObjCClassDeclaration(Message);
GPBObjCClassDeclaration(ReqLogin);
GPBObjCClassDeclaration(ReqReceipt);
GPBObjCClassDeclaration(ReqUpdate);
GPBObjCClassDeclaration(Route);
GPBObjCClassDeclaration(Session);

#pragma mark - FlappyRoot

@implementation FlappyRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription FlappyRoot_FileDescription = {
  .package = NULL,
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - FlappyRequest

@implementation FlappyRequest

@dynamic type;
@dynamic hasMsg, msg;
@dynamic hasLogin, login;
@dynamic hasUpdate, update;
@dynamic hasReceipt, receipt;

typedef struct FlappyRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  Message *msg;
  ReqLogin *login;
  ReqUpdate *update;
  ReqReceipt *receipt;
} FlappyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = FlappyRequest_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FlappyRequest__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = GPBObjCClass(Message),
        .number = FlappyRequest_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FlappyRequest__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "login",
        .dataTypeSpecific.clazz = GPBObjCClass(ReqLogin),
        .number = FlappyRequest_FieldNumber_Login,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FlappyRequest__storage_, login),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "update",
        .dataTypeSpecific.clazz = GPBObjCClass(ReqUpdate),
        .number = FlappyRequest_FieldNumber_Update,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FlappyRequest__storage_, update),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receipt",
        .dataTypeSpecific.clazz = GPBObjCClass(ReqReceipt),
        .number = FlappyRequest_FieldNumber_Receipt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FlappyRequest__storage_, receipt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(FlappyRequest)
                                   messageName:@"FlappyRequest"
                               fileDescription:&FlappyRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FlappyRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FlappyResponse

@implementation FlappyResponse

@dynamic type;
@dynamic msgArray, msgArray_Count;
@dynamic sessionsArray, sessionsArray_Count;
@dynamic hasUpdate, update;

typedef struct FlappyResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  NSMutableArray *msgArray;
  NSMutableArray *sessionsArray;
  ReqUpdate *update;
} FlappyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = FlappyResponse_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FlappyResponse__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msgArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Message),
        .number = FlappyResponse_FieldNumber_MsgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FlappyResponse__storage_, msgArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Session),
        .number = FlappyResponse_FieldNumber_SessionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FlappyResponse__storage_, sessionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "update",
        .dataTypeSpecific.clazz = GPBObjCClass(ReqUpdate),
        .number = FlappyResponse_FieldNumber_Update,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FlappyResponse__storage_, update),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(FlappyResponse)
                                   messageName:@"FlappyResponse"
                               fileDescription:&FlappyRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FlappyResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReqLogin

@implementation ReqLogin

@dynamic userId;
@dynamic devicePlat;
@dynamic deviceId;
@dynamic latest;
@dynamic secret;

typedef struct ReqLogin__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *devicePlat;
  NSString *deviceId;
  NSString *latest;
  NSString *secret;
} ReqLogin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReqLogin_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReqLogin__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "devicePlat",
        .dataTypeSpecific.clazz = Nil,
        .number = ReqLogin_FieldNumber_DevicePlat,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReqLogin__storage_, devicePlat),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReqLogin_FieldNumber_DeviceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReqLogin__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "latest",
        .dataTypeSpecific.clazz = Nil,
        .number = ReqLogin_FieldNumber_Latest,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReqLogin__storage_, latest),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "secret",
        .dataTypeSpecific.clazz = Nil,
        .number = ReqLogin_FieldNumber_Secret,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReqLogin__storage_, secret),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ReqLogin)
                                   messageName:@"ReqLogin"
                               fileDescription:&FlappyRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReqLogin__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\003\001\005A\000\002\n\000\003\010\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReqUpdate

@implementation ReqUpdate

@dynamic updateType;
@dynamic updateId;

typedef struct ReqUpdate__storage_ {
  uint32_t _has_storage_[1];
  int32_t updateType;
  NSString *updateId;
} ReqUpdate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "updateType",
        .dataTypeSpecific.clazz = Nil,
        .number = ReqUpdate_FieldNumber_UpdateType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReqUpdate__storage_, updateType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "updateId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReqUpdate_FieldNumber_UpdateId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReqUpdate__storage_, updateId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ReqUpdate)
                                   messageName:@"ReqUpdate"
                               fileDescription:&FlappyRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReqUpdate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\001\n\000\002\007A\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReqReceipt

@implementation ReqReceipt

@dynamic receiptType;
@dynamic receiptId;

typedef struct ReqReceipt__storage_ {
  uint32_t _has_storage_[1];
  int32_t receiptType;
  NSString *receiptId;
} ReqReceipt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "receiptType",
        .dataTypeSpecific.clazz = Nil,
        .number = ReqReceipt_FieldNumber_ReceiptType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReqReceipt__storage_, receiptType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "receiptId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReqReceipt_FieldNumber_ReceiptId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReqReceipt__storage_, receiptId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ReqReceipt)
                                   messageName:@"ReqReceipt"
                               fileDescription:&FlappyRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReqReceipt__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\001\013\000\002\010A\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Session

@implementation Session

@dynamic sessionId;
@dynamic sessionExtendId;
@dynamic sessionType;
@dynamic sessionInfo;
@dynamic sessionName;
@dynamic sessionImage;
@dynamic sessionOffset;
@dynamic sessionStamp;
@dynamic sessionCreateDate;
@dynamic sessionCreateUser;
@dynamic isDelete;
@dynamic deleteDate;
@dynamic users;

typedef struct Session__storage_ {
  uint32_t _has_storage_[1];
  int32_t sessionType;
  int32_t isDelete;
  NSString *sessionExtendId;
  NSString *sessionInfo;
  NSString *sessionName;
  NSString *sessionImage;
  NSString *sessionOffset;
  NSString *sessionCreateDate;
  NSString *sessionCreateUser;
  NSString *deleteDate;
  NSString *users;
  int64_t sessionId;
  int64_t sessionStamp;
} Session__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = Session_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Session__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sessionExtendId",
        .dataTypeSpecific.clazz = Nil,
        .number = Session_FieldNumber_SessionExtendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Session__storage_, sessionExtendId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionType",
        .dataTypeSpecific.clazz = Nil,
        .number = Session_FieldNumber_SessionType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Session__storage_, sessionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sessionInfo",
        .dataTypeSpecific.clazz = Nil,
        .number = Session_FieldNumber_SessionInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Session__storage_, sessionInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionName",
        .dataTypeSpecific.clazz = Nil,
        .number = Session_FieldNumber_SessionName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Session__storage_, sessionName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionImage",
        .dataTypeSpecific.clazz = Nil,
        .number = Session_FieldNumber_SessionImage,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Session__storage_, sessionImage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionOffset",
        .dataTypeSpecific.clazz = Nil,
        .number = Session_FieldNumber_SessionOffset,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Session__storage_, sessionOffset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionStamp",
        .dataTypeSpecific.clazz = Nil,
        .number = Session_FieldNumber_SessionStamp,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Session__storage_, sessionStamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sessionCreateDate",
        .dataTypeSpecific.clazz = Nil,
        .number = Session_FieldNumber_SessionCreateDate,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Session__storage_, sessionCreateDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionCreateUser",
        .dataTypeSpecific.clazz = Nil,
        .number = Session_FieldNumber_SessionCreateUser,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Session__storage_, sessionCreateUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isDelete",
        .dataTypeSpecific.clazz = Nil,
        .number = Session_FieldNumber_IsDelete,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Session__storage_, isDelete),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "deleteDate",
        .dataTypeSpecific.clazz = Nil,
        .number = Session_FieldNumber_DeleteDate,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(Session__storage_, deleteDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "users",
        .dataTypeSpecific.clazz = Nil,
        .number = Session_FieldNumber_Users,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(Session__storage_, users),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Session)
                                   messageName:@"Session"
                               fileDescription:&FlappyRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Session__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\014\001\t\000\002\017\000\003\013\000\004\013\000\005\013\000\006\014\000\007\r\000\010\014\000\t\021\000\n\021\000\013\010\000\014\n\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Message

@implementation Message

@dynamic messageId;
@dynamic messageSessionId;
@dynamic messageSessionType;
@dynamic messageSessionOffset;
@dynamic messageTableOffset;
@dynamic messageType;
@dynamic messageSendId;
@dynamic messageSendExtendId;
@dynamic messageReceiveId;
@dynamic messageReceiveExtendId;
@dynamic messageContent;
@dynamic messageSendState;
@dynamic messageReadState;
@dynamic messageSecret;
@dynamic messageDate;
@dynamic messageReplyMsgId;
@dynamic messageReplyMsgType;
@dynamic messageReplyMsgContent;
@dynamic messageReplyUserId;
@dynamic messageRecallUserId;
@dynamic messageAtUserIds;
@dynamic messageReadUserIds;
@dynamic messageDeleteUserIds;
@dynamic isDelete;
@dynamic deleteDate;

typedef struct Message__storage_ {
  uint32_t _has_storage_[1];
  int32_t messageSessionType;
  int32_t messageType;
  int32_t messageSendState;
  int32_t messageReadState;
  int32_t messageReplyMsgType;
  int32_t isDelete;
  NSString *messageId;
  NSString *messageSendExtendId;
  NSString *messageReceiveExtendId;
  NSString *messageContent;
  NSString *messageSecret;
  NSString *messageDate;
  NSString *messageReplyMsgId;
  NSString *messageReplyMsgContent;
  NSString *messageReplyUserId;
  NSString *messageRecallUserId;
  NSString *messageAtUserIds;
  NSString *messageReadUserIds;
  NSString *messageDeleteUserIds;
  NSString *deleteDate;
  int64_t messageSessionId;
  int64_t messageSessionOffset;
  int64_t messageTableOffset;
  int64_t messageSendId;
  int64_t messageReceiveId;
} Message__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageSessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageSessionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Message__storage_, messageSessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "messageSessionType",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageSessionType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Message__storage_, messageSessionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "messageSessionOffset",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageSessionOffset,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Message__storage_, messageSessionOffset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "messageTableOffset",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageTableOffset,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Message__storage_, messageTableOffset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "messageType",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Message__storage_, messageType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "messageSendId",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageSendId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Message__storage_, messageSendId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "messageSendExtendId",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageSendExtendId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Message__storage_, messageSendExtendId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageReceiveId",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageReceiveId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Message__storage_, messageReceiveId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "messageReceiveExtendId",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageReceiveExtendId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Message__storage_, messageReceiveExtendId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageContent",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageContent,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Message__storage_, messageContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageSendState",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageSendState,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(Message__storage_, messageSendState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "messageReadState",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageReadState,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(Message__storage_, messageReadState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "messageSecret",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageSecret,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(Message__storage_, messageSecret),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageDate",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageDate,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(Message__storage_, messageDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageReplyMsgId",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageReplyMsgId,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(Message__storage_, messageReplyMsgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageReplyMsgType",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageReplyMsgType,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(Message__storage_, messageReplyMsgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "messageReplyMsgContent",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageReplyMsgContent,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(Message__storage_, messageReplyMsgContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageReplyUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageReplyUserId,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(Message__storage_, messageReplyUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageRecallUserId",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageRecallUserId,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(Message__storage_, messageRecallUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageAtUserIds",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageAtUserIds,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(Message__storage_, messageAtUserIds),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageReadUserIds",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageReadUserIds,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(Message__storage_, messageReadUserIds),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageDeleteUserIds",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageDeleteUserIds,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(Message__storage_, messageDeleteUserIds),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isDelete",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_IsDelete,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(Message__storage_, isDelete),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "deleteDate",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_DeleteDate,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(Message__storage_, deleteDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Message)
                                   messageName:@"Message"
                               fileDescription:&FlappyRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\031\001\t\000\002\020\000\003\022\000\004\024\000\005\022\000\006\013\000\007\r\000\010\023\000\t\020\000\n\026\000\013\016\000\014\020\000\r\020\000"
        "\016\r\000\017\013\000\020\021\000\021\023\000\022\026\000\023\022\000\024\023\000\025\020\000\026\022\000\027\024\000\030\010\000\031\n\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FlappyKafka

@implementation FlappyKafka

@dynamic type;
@dynamic routeArray, routeArray_Count;
@dynamic hasMsg, msg;

typedef struct FlappyKafka__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  NSMutableArray *routeArray;
  Message *msg;
} FlappyKafka__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = FlappyKafka_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FlappyKafka__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "routeArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Route),
        .number = FlappyKafka_FieldNumber_RouteArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FlappyKafka__storage_, routeArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = GPBObjCClass(Message),
        .number = FlappyKafka_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FlappyKafka__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(FlappyKafka)
                                   messageName:@"FlappyKafka"
                               fileDescription:&FlappyRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FlappyKafka__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Route

@implementation Route

@dynamic userId;
@dynamic devicePlat;
@dynamic deviceId;
@dynamic pushType;
@dynamic pushPlat;
@dynamic pushId;
@dynamic pushLanguage;
@dynamic pushPrivacy;
@dynamic pushMute;
@dynamic time;

typedef struct Route__storage_ {
  uint32_t _has_storage_[1];
  int32_t pushType;
  int32_t pushPrivacy;
  int32_t pushMute;
  NSString *devicePlat;
  NSString *deviceId;
  NSString *pushPlat;
  NSString *pushId;
  NSString *pushLanguage;
  NSString *time;
  int64_t userId;
} Route__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = Route_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Route__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "devicePlat",
        .dataTypeSpecific.clazz = Nil,
        .number = Route_FieldNumber_DevicePlat,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Route__storage_, devicePlat),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = Route_FieldNumber_DeviceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Route__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushType",
        .dataTypeSpecific.clazz = Nil,
        .number = Route_FieldNumber_PushType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Route__storage_, pushType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pushPlat",
        .dataTypeSpecific.clazz = Nil,
        .number = Route_FieldNumber_PushPlat,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Route__storage_, pushPlat),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushId",
        .dataTypeSpecific.clazz = Nil,
        .number = Route_FieldNumber_PushId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Route__storage_, pushId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushLanguage",
        .dataTypeSpecific.clazz = Nil,
        .number = Route_FieldNumber_PushLanguage,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Route__storage_, pushLanguage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushPrivacy",
        .dataTypeSpecific.clazz = Nil,
        .number = Route_FieldNumber_PushPrivacy,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Route__storage_, pushPrivacy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pushMute",
        .dataTypeSpecific.clazz = Nil,
        .number = Route_FieldNumber_PushMute,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Route__storage_, pushMute),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = Route_FieldNumber_Time,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Route__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Route)
                                   messageName:@"Route"
                               fileDescription:&FlappyRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Route__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\t\001\005A\000\002\n\000\003\010\000\004\010\000\005\010\000\006\006\000\007\014\000\010\013\000\t\010\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
