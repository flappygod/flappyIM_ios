// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: flappy.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Message;
@class ReqLogin;
@class ReqReceipt;
@class ReqUpdate;
@class Route;
@class Session;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - FlappyRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface FlappyRoot : GPBRootObject
@end

#pragma mark - FlappyRequest

typedef GPB_ENUM(FlappyRequest_FieldNumber) {
  FlappyRequest_FieldNumber_Type = 1,
  FlappyRequest_FieldNumber_Msg = 2,
  FlappyRequest_FieldNumber_Login = 3,
  FlappyRequest_FieldNumber_Update = 4,
  FlappyRequest_FieldNumber_Receipt = 5,
};

GPB_FINAL @interface FlappyRequest : GPBMessage

/** 请求类型 */
@property(nonatomic, readwrite) int32_t type;

/** 聊天消息 */
@property(nonatomic, readwrite, strong, null_resettable) Message *msg;
/** Test to see if @c msg has been set. */
@property(nonatomic, readwrite) BOOL hasMsg;

/** 登录信息 */
@property(nonatomic, readwrite, strong, null_resettable) ReqLogin *login;
/** Test to see if @c login has been set. */
@property(nonatomic, readwrite) BOOL hasLogin;

/** 更新信息 */
@property(nonatomic, readwrite, strong, null_resettable) ReqUpdate *update;
/** Test to see if @c update has been set. */
@property(nonatomic, readwrite) BOOL hasUpdate;

/** 信息回执 */
@property(nonatomic, readwrite, strong, null_resettable) ReqReceipt *receipt;
/** Test to see if @c receipt has been set. */
@property(nonatomic, readwrite) BOOL hasReceipt;

@end

#pragma mark - FlappyResponse

typedef GPB_ENUM(FlappyResponse_FieldNumber) {
  FlappyResponse_FieldNumber_Type = 1,
  FlappyResponse_FieldNumber_MsgArray = 2,
  FlappyResponse_FieldNumber_SessionsArray = 3,
  FlappyResponse_FieldNumber_Update = 4,
};

GPB_FINAL @interface FlappyResponse : GPBMessage

/** 响应类型 */
@property(nonatomic, readwrite) int32_t type;

/** 消息列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Message*> *msgArray;
/** The number of items in @c msgArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger msgArray_Count;

/** 会话列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Session*> *sessionsArray;
/** The number of items in @c sessionsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger sessionsArray_Count;

/** 更新信息 */
@property(nonatomic, readwrite, strong, null_resettable) ReqUpdate *update;
/** Test to see if @c update has been set. */
@property(nonatomic, readwrite) BOOL hasUpdate;

@end

#pragma mark - ReqLogin

typedef GPB_ENUM(ReqLogin_FieldNumber) {
  ReqLogin_FieldNumber_UserId = 1,
  ReqLogin_FieldNumber_DevicePlat = 2,
  ReqLogin_FieldNumber_DeviceId = 3,
  ReqLogin_FieldNumber_Latest = 4,
  ReqLogin_FieldNumber_Secret = 5,
};

GPB_FINAL @interface ReqLogin : GPBMessage

/** 用户ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** 设备信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *devicePlat;

/** 推送ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceId;

/** 最后的消息序号 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *latest;

/** 秘钥验证 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *secret;

@end

#pragma mark - ReqUpdate

typedef GPB_ENUM(ReqUpdate_FieldNumber) {
  ReqUpdate_FieldNumber_UpdateType = 1,
  ReqUpdate_FieldNumber_UpdateId = 2,
};

GPB_FINAL @interface ReqUpdate : GPBMessage

/** 更新的类型 */
@property(nonatomic, readwrite) int32_t updateType;

/** 更新的ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *updateId;

@end

#pragma mark - ReqReceipt

typedef GPB_ENUM(ReqReceipt_FieldNumber) {
  ReqReceipt_FieldNumber_ReceiptType = 1,
  ReqReceipt_FieldNumber_ReceiptId = 2,
};

GPB_FINAL @interface ReqReceipt : GPBMessage

/** 回执类型 */
@property(nonatomic, readwrite) int32_t receiptType;

/** 回执的ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *receiptId;

@end

#pragma mark - Session

typedef GPB_ENUM(Session_FieldNumber) {
  Session_FieldNumber_SessionId = 1,
  Session_FieldNumber_SessionExtendId = 2,
  Session_FieldNumber_SessionType = 3,
  Session_FieldNumber_SessionInfo = 4,
  Session_FieldNumber_SessionName = 5,
  Session_FieldNumber_SessionImage = 6,
  Session_FieldNumber_SessionOffset = 7,
  Session_FieldNumber_SessionStamp = 8,
  Session_FieldNumber_SessionCreateDate = 9,
  Session_FieldNumber_SessionCreateUser = 10,
  Session_FieldNumber_IsDelete = 11,
  Session_FieldNumber_DeleteDate = 12,
  Session_FieldNumber_Users = 13,
};

GPB_FINAL @interface Session : GPBMessage

/** 会话ID */
@property(nonatomic, readwrite) int64_t sessionId;

/** 会话扩展ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionExtendId;

/** 会话类型 */
@property(nonatomic, readwrite) int32_t sessionType;

/** 会话信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionInfo;

/** 会话名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionName;

/** 会话图片 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionImage;

/** 会话当前最大偏移 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionOffset;

/** 会话时间戳 */
@property(nonatomic, readwrite) int64_t sessionStamp;

/** 会话创建时间 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionCreateDate;

/** 会话创建用户 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionCreateUser;

/** 是否删除 */
@property(nonatomic, readwrite) int32_t isDelete;

/** 删除日期 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *deleteDate;

/** 会话用户 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *users;

@end

#pragma mark - Message

typedef GPB_ENUM(Message_FieldNumber) {
  Message_FieldNumber_MessageId = 1,
  Message_FieldNumber_MessageSessionId = 2,
  Message_FieldNumber_MessageSessionType = 3,
  Message_FieldNumber_MessageSessionOffset = 4,
  Message_FieldNumber_MessageTableOffset = 5,
  Message_FieldNumber_MessageType = 6,
  Message_FieldNumber_MessageSendId = 7,
  Message_FieldNumber_MessageSendExtendId = 8,
  Message_FieldNumber_MessageReceiveId = 9,
  Message_FieldNumber_MessageReceiveExtendId = 10,
  Message_FieldNumber_MessageContent = 11,
  Message_FieldNumber_MessageSendState = 12,
  Message_FieldNumber_MessageReadState = 13,
  Message_FieldNumber_MessageSecret = 14,
  Message_FieldNumber_MessageDate = 15,
  Message_FieldNumber_MessageReplyMsgId = 16,
  Message_FieldNumber_MessageReplyMsgType = 17,
  Message_FieldNumber_MessageReplyMsgContent = 18,
  Message_FieldNumber_MessageReplyUserId = 19,
  Message_FieldNumber_MessageRecallUserId = 20,
  Message_FieldNumber_MessageAtUserIds = 21,
  Message_FieldNumber_MessageReadUserIds = 22,
  Message_FieldNumber_MessageDeleteUserIds = 23,
  Message_FieldNumber_IsDelete = 24,
  Message_FieldNumber_DeleteDate = 25,
};

GPB_FINAL @interface Message : GPBMessage

/** 消息ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageId;

/** 消息会话 */
@property(nonatomic, readwrite) int64_t messageSessionId;

/** 消息会话类型 */
@property(nonatomic, readwrite) int32_t messageSessionType;

/** 消息会话偏移量 */
@property(nonatomic, readwrite) int64_t messageSessionOffset;

/** 消息序列 */
@property(nonatomic, readwrite) int64_t messageTableOffset;

/** 消息类型 */
@property(nonatomic, readwrite) int32_t messageType;

/** 消息发送者ID */
@property(nonatomic, readwrite) int64_t messageSendId;

/** 消息发送者外部ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageSendExtendId;

/** 消息接受者 */
@property(nonatomic, readwrite) int64_t messageReceiveId;

/** 消息接收外部ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageReceiveExtendId;

/** 消息内容 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageContent;

/** 消息是否已发送 */
@property(nonatomic, readwrite) int32_t messageSendState;

/** 消息是否已经被阅读 */
@property(nonatomic, readwrite) int32_t messageReadState;

/** 消息发送秘钥 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageSecret;

/** 消息时间 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageDate;

/** 回复的消息ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageReplyMsgId;

/** 回复的消息类型 */
@property(nonatomic, readwrite) int32_t messageReplyMsgType;

/** 回复的消息内容 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageReplyMsgContent;

/** 回复的用户ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageReplyUserId;

/** 撤回的用户ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageRecallUserId;

/** AT的用户ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageAtUserIds;

/** 已读的用户ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageReadUserIds;

/** 删除的用户ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageDeleteUserIds;

/** 消息是否被删除 */
@property(nonatomic, readwrite) int32_t isDelete;

/** 消息删除日期 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *deleteDate;

@end

#pragma mark - FlappyKafka

typedef GPB_ENUM(FlappyKafka_FieldNumber) {
  FlappyKafka_FieldNumber_Type = 1,
  FlappyKafka_FieldNumber_RouteArray = 2,
  FlappyKafka_FieldNumber_Msg = 3,
};

GPB_FINAL @interface FlappyKafka : GPBMessage

/** 类型 */
@property(nonatomic, readwrite) int32_t type;

/** 路由信息 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Route*> *routeArray;
/** The number of items in @c routeArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger routeArray_Count;

/** 消息信息 */
@property(nonatomic, readwrite, strong, null_resettable) Message *msg;
/** Test to see if @c msg has been set. */
@property(nonatomic, readwrite) BOOL hasMsg;

@end

#pragma mark - Route

typedef GPB_ENUM(Route_FieldNumber) {
  Route_FieldNumber_UserId = 1,
  Route_FieldNumber_DevicePlat = 2,
  Route_FieldNumber_DeviceId = 3,
  Route_FieldNumber_PushType = 4,
  Route_FieldNumber_PushPlat = 5,
  Route_FieldNumber_PushId = 6,
  Route_FieldNumber_PushLanguage = 7,
  Route_FieldNumber_PushPrivacy = 8,
  Route_FieldNumber_PushMute = 9,
  Route_FieldNumber_Time = 10,
};

GPB_FINAL @interface Route : GPBMessage

/** 用户ID */
@property(nonatomic, readwrite) int64_t userId;

/** 用户设备 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *devicePlat;

/** 用户设备 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceId;

/** 推送类型 */
@property(nonatomic, readwrite) int32_t pushType;

/** 推送平台类型 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pushPlat;

/** 推送ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pushId;

/** 推送平台语言 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pushLanguage;

/** 推送平台隐私 */
@property(nonatomic, readwrite) int32_t pushPrivacy;

/** 推送平台免打扰 */
@property(nonatomic, readwrite) int32_t pushMute;

/** 时间 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *time;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
